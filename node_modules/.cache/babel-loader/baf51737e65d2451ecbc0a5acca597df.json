{"ast":null,"code":"/* eslint-disable no-console */\n\n/* eslint-disable no-param-reassign */\n// this is the current snapshot that is being sent to the snapshots array.\nclass Tree {\n  constructor(component, useStateInstead = false, name) {\n    // special case when component is root\n    // give it a special state = 'root'\n    // a setState function that just calls the callback instantly\n    if (!useStateInstead) {\n      this.component = component === 'root' ? {\n        state: 'root',\n        setState: (partial, callback) => callback()\n      } : component;\n    } else {\n      this.state = component;\n      this.name = name;\n    }\n\n    this.children = []; // DEV: Added print() for debugging purposes\n    // this.print(); // this call is not useful here. it would be useful in a function call where we've already added to this.children\n  }\n\n  appendChild(component) {\n    const child = new Tree(component);\n    this.children.push(child);\n    return child;\n  } // deep copies only the state of each component and creates a new tree\n\n\n  getCopy(copy = new Tree('root', true)) {\n    // copy state of children\n    copy.children = this.children.map(child => new Tree(child.component.state || child.component.traversed, true, child.component.constructor.name)); // copy children's children recursively\n\n    this.children.forEach((child, i) => child.getCopy(copy.children[i]));\n    return copy;\n  } // print out the tree structure in the console\n  // DEV: Process may be different for useState components\n  // BUG FIX: Don't print the Router as a component\n  // Change how the children are printed\n\n\n  print() {\n    console.log(\"current tree structure for *this : \", this);\n    const children = ['children: ']; // DEV: What should we push instead for components using hooks (it wouldn't be state)\n\n    this.children.forEach(child => {\n      // if this.children is always initialized to empty array, when would there ever be anything to iterate through here?\n      children.push(child.state || child.component.state);\n    });\n    if (this.name) console.log(\"this.name if exists: \", this.name);\n\n    if (children.length === 1) {\n      console.log(\"children length 1. \".concat(this.state ? \"this.state: \" : \"this.component.state: \"), this.state || this.component.state);\n    } else console.log(\"children length !== 1. \".concat(this.state ? \"this.state: \" : \"this.component.state, children: \"), this.state || this.component.state, ...children);\n\n    this.children.forEach(child => {\n      child.print();\n    });\n  }\n\n}\n\nmodule.exports = Tree;","map":null,"metadata":{},"sourceType":"script"}