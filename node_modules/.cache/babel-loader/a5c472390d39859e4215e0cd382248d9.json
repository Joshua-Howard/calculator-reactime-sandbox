{"ast":null,"code":"/* eslint-disable no-param-reassign */\n// traverses given tree by accessing children through coords array\nconst _require = require('./masterState'),\n      returnState = _require.returnState;\n\nfunction traverseTree(tree, coords) {\n  let curr = tree;\n  coords.forEach(coord => {\n    curr = curr.children[coord];\n  });\n  return curr;\n}\n\nmodule.exports = (origin, mode) => {\n  // recursively change state of tree\n  function jump(target, coords = []) {\n    const originNode = traverseTree(origin.tree, coords); // set the state of the origin tree if the component is stateful\n\n    if (originNode.component.setState) {\n      originNode.component.setState(target.state, () => {\n        // iterate through new children once state has been set\n        target.children.forEach((child, i) => {\n          jump(child, coords.concat(i));\n        });\n      });\n    } else {\n      // if component uses hooks, traverse through the memoize tree\n      let current = originNode.component;\n      let index = 0;\n      const hooks = returnState(); // while loop through the memoize tree\n\n      while (current && current.queue) {\n        // allows time travel with useEffect\n        current.queue.dispatch(target.state[hooks[index]]); // Reassign the current value\n\n        current = current.next;\n        index += 2;\n      }\n    }\n  }\n\n  return target => {\n    // setting mode disables setState from posting messages to window\n    mode.jumping = true;\n    jump(target);\n    setTimeout(() => {\n      mode.jumping = false;\n    }, 100);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}