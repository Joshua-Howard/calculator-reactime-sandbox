{"ast":null,"code":"/* eslint-disable no-inner-declarations */\nconst acorn = require('acorn'); // javascript parser\n// eslint-disable-next-line import/newline-after-import\n\n\nconst jsx = require('acorn-jsx');\n\nconst JSXParser = acorn.Parser.extend(jsx()); // Helper function to grab the getters/setters from `elementType`\n\nmodule.exports = elementType => {\n  // Initialize empty object to store the setters and getter\n  let ast = JSXParser.parse(elementType);\n  const hookState = {};\n\n  while (Object.hasOwnProperty.call(ast, 'body')) {\n    ast = ast.body;\n    const statements = [];\n    /** All module exports always start off as a single 'FunctionDeclaration' type\n     * Other types: \"BlockStatement\" / \"ExpressionStatement\" / \"ReturnStatement\"\n     * Iterate through AST of every function declaration\n     * Check within each function declaration if there are hook declarations */\n\n    ast.forEach(functionDec => {\n      let body;\n      if (functionDec.expression) body = functionDec.expression.body.body;else body = functionDec.body.body; // Traverse through the function's funcDecs and Expression Statements\n\n      body.forEach(elem => {\n        if (elem.type === 'VariableDeclaration') {\n          elem.declarations.forEach(hook => {\n            statements.push(hook.id.name);\n          });\n        }\n      }); // Iterate array and determine getter/setters based on pattern\n\n      statements.forEach((el, i) => {\n        if (el.match(/_use/)) hookState[el] = statements[i + 2];\n      });\n    });\n  }\n\n  return hookState;\n};","map":null,"metadata":{},"sourceType":"script"}